{
  "about": {
    "about": "About",
    "acaPy": {
      "acaPy": "ACA-Py",
      "acapyVersion": "ACA-Py version {version}",
      "info": "Licence information for ACA-Py",
      "ledger": "Ledger",
      "ledgerBrowser": "Ledger Browser",
      "plugins": "List of Installed Plugins",
      "tailsServer": "Tails Server"
    },
    "traction": {
      "imageCreated": "Image created at",
      "imageTag": "Image tag",
      "imageVersion": "Image version",
      "info": "Licence information for TRACTION",
      "repository": "GitHub repo for Traction",
      "swagger": "Swagger URL",
      "traction": "Traction",
      "tractionVersion": "Traction version {version}",
      "uiVersion": "Tenant UI version {version}",
      "url": "Traction URL"
    }
  },
  "admin": {
    "adminKey": "Admin Key",
    "adminName": "Admin Name",
    "error": "ERROR",
    "orSignInWith": "Or Sign In With"
  },
  "common": {
    "actions": "Actions",
    "alias": "Alias",
    "contactName": "Contact Name",
    "credentialId": "Credential ID",
    "credentials": "Credentials",
    "developer": "Developer",
    "emailAddress": "Email Address",
    "endorser": "Endorser",
    "invitationUrl": "Invitation URL",
    "json": "JSON",
    "loading": "Loading data. Please wait...",
    "logout": "Logout",
    "noRecordsFound": "No Records Found",
    "profile": "Profile",
    "refreshTable": "Refresh Table",
    "request": "Request",
    "settings": "Settings",
    "status": "Status",
    "submit": "Submit",
    "tenantName": "Tenant Name",
    "tenantReason": "Tenant Reason",
    "walletId": "Wallet ID"
  },
  "configuration": {
    "configuration": "Configuration",
    "credentialDefinitions": {
      "storage": "Credential Definition Storage"
    },
    "oca": {
      "bundleAssociationType": "OCA Bundle association type",
      "bundleJson": "OCA Bundle JSON",
      "bundleUrl": "OCA Bundle URL*",
      "oca": "OCA",
      "storedBundleJson": "Stored Bundle JSON",
      "url": "URL"
    },
    "presentationTemplates": {
      "templates": "Presentation Templates"
    },
    "schemas": {
      "copy": "Copy Schema",
      "create": "Create Schema",
      "storage": "Schema Storage"
    },
    "schemasCreds": {
      "credentialDefinitions": "Stored Credential Definitions",
      "schemas": "Stored Schemas"
    }
  },
  "connect": {
    "acceptInvitation": {
      "accept": "Accept Invitation",
      "invitation": "Invitation",
      "skipUrl": "Skip URL and use JSON",
      "submit": "Accept",
      "supportedUrl": "Supported URL format is",
      "url": "Invitation URL"
    },
    "connections": {
      "connections": "Connections",
      "delete": "Delete Connection",
      "edit": "Edit Connection",
      "search": "Search Connections"
    },
    "didExchange": {
      "did": "DID",
      "didExchange": "DID Exchange"
    },
    "edit": {
      "lastUpdated": "Connection Last Updated: {0}"
    },
    "invitation": {
      "alias": "Contact Alias",
      "close": "Close",
      "submit": "Submit"
    },
    "invitations": {
      "create": "Create Invitation",
      "invitations": "Invitations",
      "regenerate": "Regenerate Invitation",
      "search": "Search Invitations"
    },
    "message": {
      "messageContact": "Chat with {0}"
    },
    "multiUseInvitation": {
      "multi": "Multi Use Invitation",
      "multiCreate": "Create Multi Use Invitation"
    },
    "singleUseInvitation": {
      "single": "Single Use Invitation",
      "singleCreate": "Create Single Use Invitation"
    },
    "table": {
      "createdAt": "Created At",
      "invitationMode": "Invitation Mode",
      "theirLabel": "Their Label"
    }
  },
  "credentials": {
    "exchanges": {
      "exchanges": "Credential Exchanges",
      "search": "Search Credential Exchanges",
      "table": {
        "connection": "Connection",
        "credential": "Credential",
        "lastUpdate": "Last Update"
      }
    },
    "wallet": {
      "notFound": "There are no credentials in your Wallet",
      "noOca": "There is no OCA associated with this credential definition",
      "noOcaNotImpl": "Cannot display card view for Credentials without OCA at this time."
    }
  },
  "dashboard": {
    "backToDashboard": "Back to Dashboard",
    "dashboard": "Dashboard",
    "greeting": "Powered by Traction"
  },
  "holder": {
    "holder": "Holder"
  },
  "home": {
    "dashboard": "Dashboard",
    "greeting": "Powered by Traction",
    "login": {
      "id": "Wallet ID",
      "secret": "Wallet Key",
      "submit": "Sign-In"
    }
  },
  "httpStatus": {
    "404": {
      "code": "404",
      "status": "Page Not Found"
    }
  },
  "issue": {
    "attributes": "Attributes*",
    "connection": "Connection: ",
    "credentialDefinitionTag": "Credential Definition Tag*",
    "credentialFieldValues": "Credential Field Values",
    "credentials": "Issued/Offered Credentials",
    "credentialValue": "Credential Value",
    "delete": {
      "confirm": "Are you sure you want to DELETE this credential exchange record?",
      "removeExchange": "Remove Credential Exchange Record",
      "success": "Credential exchange record deleted"
    },
    "id": "ID: ",
    "issuance": "Issuance",
    "offer": "Offer Credential",
    "revocationEnabled": "Revocation Enabled",
    "revocationId": "Revocation ID: ",
    "revocationRegistry": "Revocation Registry: ",
    "revocationRegistrySize": "Revocation Registry Size",
    "revoke": {
      "action": "Revoke",
      "comment": "Optional Comment",
      "confirm": "Are you sure you want to REVOKE this credential?",
      "revokeCred": "Revoke Credential",
      "success": "Credential revoked"
    },
    "schema": "Schema",
    "schemaId": "Schema Id*",
    "schemaName": "Schema Name*",
    "schemaVersion": "Schema Version*",
    "version": "Version:"
  },
  "layout": {
    "header": {
      "toggleSideMenu": "Toggle the side menu"
    }
  },
  "login": {
    "backToSignIn": "Go Back to Sign-in",
    "checkStatus": "Check Status!",
    "createRequest": "Create Request!",
    "noAccount": "Don't have an account?",
    "submit": "Sign-In",
    "submittedRequest": "Already Submitted Request?",
    "walletSecret": "Wallet Key"
  },
  "messages": {
    "connectionId": "Connection ID",
    "createMessage": "Create a Message",
    "messageContent": "Message Content",
    "messages": "Messages"
  },
  "profile": {
    "config": "Config:",
    "connectionNotActiveYet": "Connection not Active yet, refresh or come back later.",
    "connectTenantToEndorser": "Connect Tenant To Endorser",
    "createdAt": "Created at",
    "endorserConnection": "Endorser Connection",
    "endorserInfo": "Endorser Info",
    "imageUrl": "Image URL",
    "issuer": "Issuer",
    "name": "Name",
    "noEndorserInfoFound": "No Endorser info found, issuance disabled",
    "publicDid": "Public DID",
    "registerPublicDid": "Register a public DID",
    "state": "State: {0}",
    "taa": {
      "agreeAccept": "I agree to the terms of the Transaction Author Agreement",
      "requiredNo": "No Transaction Author Agreement is required for this ledger.",
      "requiredYes": "A Transaction Author Agreement is required for this ledger.",
      "reviewButton": "Review/Accept TAA",
      "taaAcceptance": "TAA Acceptance",
      "taaDetails": "TAA Details"
    },
    "tenantId": "Tenant ID",
    "tenantNotConnectedToEndorserYet": "Tenant not connected to Endorser yet",
    "updatedAt": "Updated at",
    "walletLabel": "Wallet Label",
    "webHookKey": "WebHook Key",
    "webhooks": "Webhooks",
    "webHookUrl": "WebHook URL"
  },
  "qrCode": {
    "noContentFound": "No content found"
  },
  "reservations": {
    "alreadyComplete": "Already Complete",
    "approved!": "APPROVED!",
    "approved": {
      "text": "The Check-In password has been generated. An email has been sent to {email}",
      "title": "Reservation Approved",
      "toast": "Reservation Approved for {email}"
    },
    "approveRequest": "Approve Request",
    "checkJunkFolder": "(Please check your junk/spam folder before contacting us, as it is very common to have the email delivery problems because of automated filters.)",
    "contactEmail": "Contact Email",
    "contactPhone": "Contact Phone",
    "current": "Current",
    "dateOccurred": "The date this occurred was {0}",
    "declined!": "DECLINED!",
    "denied": {
      "reasonText": "Reason for Denial (Optional)",
      "toast": "Reservation Denied for {email}"
    },
    "denyRequest": "Deny Request",
    "emailSentTo": "An email has also been sent to {0} with the reservation number below.",
    "enterPassword": "Please enter the reservation password below to validate your account.",
    "history": "History",
    "incorrectEmailOrReservationId": "Incorrect Email or Reservation ID. Please try again.",
    "otp": "The password is shown below one-time if you need to communicate it via other means",
    "passwordValid48Hours": "The reservation password is only valid for 48 hours from the time it was sent to your email address.",
    "pending!": "PENDING!",
    "requestDeclined": "We regret to inform you that your request has been declined.",
    "requestProcessingTime": "It ususally takes 3-4 business days to process a request. Thanks for your patience.",
    "requestReservedOn": "Your request has been received on {0}",
    "requests": "Requests",
    "reservationHistory": "Reservation History",
    "reservationId": "Reservation ID",
    "reservationPreviouslyCompleted": "This reservation has already previously been completed and the wallet details given out.",
    "reservations": "Reservations",
    "reservationValidated": "Your reservation is validated successfully.",
    "resonForRejection": "Reason for rejection",
    "saveWalletIdAndWalletKey": "Please save your newly generated wallet id and wallet key in a secure location. You will loose the data once this window is closed or you go back to sign-in. We will never share these information over the email nor do we re-issue upon request.",
    "sentPasswordOn": "We have sent a reservation password to your email address on {0}",
    "submitNewRequest": "If you think there has been an error you can submit a new request again.",
    "submitted": "Your request has been submitted successfully. ",
    "thankYou!": "Thank You!",
    "validated!": "VALIDATED!",
    "walletIdAndWalletKey": "Here is your new Wallet ID and Wallet Key associated with the email address mentioned while registering.",
    "walletKey": "Wallet Key",
    "walletKeyCannotBeRetrievedAgain": "The wallet key cannot be retrieved again once supplied. If you require a new wallet you can go back and start a new reservation."
  },
  "reserve": {
    "fullName": "Full Name",
    "phone": "Phone / Mobile"
  },
  "status": {
    "email": "Enter your Email Address of request",
    "reservationId": "Enter your Reservation ID",
    "submit": "Check Status"
  },
  "tenant": {
    "profile": {
      "tenantProfile": "Tenant Profile"
    },
    "settings": {
      "acapyAutoAcceptInvites": "Auto accept Invitations",
      "acapyAutoAcceptRequests": "Auto accept Requests",
      "acapyAutoPingConnection": "Automatically ping Connection",
      "acapyAutoRequestEndorsement": "Automatically request Endorsement",
      "acapyAutoRespondCredentialOffer": "Automatically respond to Credential Offers",
      "acapyAutoRespondCredentialRequest": "Automatically respond to Credential Requests",
      "acapyAutoRespondMessages": "Automatically respond to Messages",
      "acapyAutoWriteTransactions": "Automatically write Endorsed Transactions",
      "acapyAutoVerifyPresentation": "Automatically verify Presentations",
      "acapyCreateRevocationTransactions": "Create Revocation Transactions",
      "acapyEndorserRole": "Endorser Role",
      "acapyInvitePublic": "Generated invite should be public",
      "acapyLogLevel": "Log Level",
      "acapyMonitorPing": "Monitor Ping",
      "acapyNotifyRevocation": "Notify of Revocation",
      "acapyPublicInvites": "Send Invitations using public DID",

      "acapyHelpAutoAcceptInvites": "ACAPY_AUTO_ACCEPT_INVITES - Automatically accept invites without firing a webhook event or waiting for an admin request.",
      "acapyHelpAutoAcceptRequests": "ACAPY_AUTO_ACCEPT_REQUESTS - Automatically accept connection requests without firing a webhook event or waiting for an admin request.",
      "acapyHelpAutoPingConnection": "ACAPY_AUTO_PING_CONNECTION - Automatically send a trust ping immediately after a connection response is accepted. Some agents require this before marking a connection as 'active'",
      "acapyHelpAutoRequestEndorsement": "ACAPY_AUTO_REQUEST_ENDORSEMENT - For Authors, specify whether to automatically request endorsement for all transactions. (If not specified, the controller must invoke the request endorse operation for each transaction.)",
      "acapyHelpAutoRespondCredentialOffer": "ACAPY_AUTO_RESPOND_CREDENTIAL_OFFER - Automatically respond to Indy credential offers with a credential request",
      "acapyHelpAutoRespondCredentialRequest": "ACAPY_AUTO_RESPOND_CREDENTIAL_REQUEST - Auto-respond to credential requests with corresponding credentials",
      "acapyHelpAutoRespondMessages": "ACAPY_AUTO_RESPOND_MESSAGES - Automatically respond to basic messages indicating the message was receieved",
      "acapyHelpAutoWriteTransactions": "ACAPY_AUTO_WRITE_TRANSACTIONS - For Authors, specify whether to automatically write any endorsed transactions. (If not specified, the controller must invoke the write transaction operation for each transaction.)",
      "acapyHelpAutoVerifyPresentation": "ACAPY_AUTO_VERIFY_PRESENTATION - Automatically verify a presentation when it is received. ",
      "acapyHelpCreateRevocationTransactions": "ACAPY_CREATE_REVOCATION_TRANSACTIONS - For Authors, specify whether to automatically create transactions for a cred def's revocation registry. (If not specified, the controller must invoke the endpoints required to create the revocation registry and assign to the cred def.)",
      "acapyHelpEndorserRole": "ACAPY_ENDORSER_ROLE - Specify the role ('author' or 'endorser') which this agent will participate. Authors will request transaction endorement from an Endorser. Endorsers will endorse transactions from Authors, and may write their own  transactions to the ledger. If no role (or 'none') is specified then the endorsement protocol will not  be used and this agent will write transactions to the ledger directly.",
      "acapyHelpInvitePublic": "ACAPY_INVITE_PUBLIC - Flag specifying the generated invite should be public.",
      "acapyHelpLogLevel": "ACAPY_LOG_LEVEL - Specifies a custom logging level.",
      "acapyHelpMonitorPing": "ACAPY_MONITOR_PING - Send a webhook when a ping is sent or received.",
      "acapyHelpNotifyRevocation": "ACAPY_NOTIFY_REVOCATION - Specifies that aca-py will notify credential recipients when revoking a credential it issued.",
      "acapyHelpPublicInvites": "ACAPY_PUBLIC_INVITES - Send invitations out using the public DID for the agent, and receive connection requests solicited by invitations which use the public DID. Default",

      "auto": "Auto Flags",
      "extraSettings": "Extra ACA-Py Settings",
      "tenantWalletSettings": "Tenant Wallet Settings"
    }
  },
  "tenants": {
    "checkIn": "Check-In Tenant",
    "tenants": "Tenants"
  },
  "verifier": {
    "attributeRestrictionsSatisfied": "All attribute restrictions were satisfied",
    "comingSoon": "Coming Soon",
    "contactAlias: ": "Contact Alias: ",
    "credentialHeldBy": "Credential is held by",
    "credentialTamperFree ": "Credential is tamper-free ",
    "credentialValid": "Credential is valid",
    "presentationShouldHaveStatus": "This is not the component you are looking for, presentation should have status='verified'",
    "presentationTemplates": "Presentation Templates",
    "status: ": "Status",
    "updatedAt": "Updated at",
    "verifications": "Verifications"
  },
  "verify": {
    "createRequest": "Create Presentation Requests",
    "verification": "Verification",
    "verifications": "Verifications"
  }
}
