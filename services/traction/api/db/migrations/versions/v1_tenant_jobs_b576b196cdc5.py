# flake8: noqa
"""v1-tenant-jobs

Revision ID: b576b196cdc5
Revises: 135b4f1c8965
Create Date: 2022-07-30 15:50:58.644783

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "b576b196cdc5"
down_revision = "135b4f1c8965"
branch_labels = None
depends_on = None


create_timeline_func = """CREATE OR REPLACE FUNCTION tenant_job_timeline_func() RETURNS trigger AS $body$
    BEGIN
        IF NEW.status IS DISTINCT FROM OLD.status OR NEW.state IS DISTINCT FROM OLD.state THEN
            INSERT INTO "timeline" ( "item_id", "status", "state", "error_status_detail" )
            VALUES(NEW."tenant_job_id", NEW."status", NEW."state", NEW."error_status_detail");
            RETURN NEW;
        END IF;
        RETURN null;
    END;
    $body$ LANGUAGE plpgsql
"""

drop_timeline_func = """DROP FUNCTION tenant_job_timeline_func"""

create_timeline_trigger = """CREATE TRIGGER tenant_job_timeline_trigger
AFTER INSERT OR UPDATE OF status, state ON tenant_job
FOR EACH ROW EXECUTE PROCEDURE tenant_job_timeline_func();"""

drop_timeline_trigger = """DROP TRIGGER tenant_job_timeline_trigger ON tenant_job"""


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tenant_job",
        sa.Column(
            "tenant_job_id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("tenant_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("state", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("job_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("data", postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.Column("error_status_detail", sa.VARCHAR(), nullable=True),
        sa.Column("comment", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["tenant.id"],
        ),
        sa.PrimaryKeyConstraint("tenant_job_id"),
        sa.UniqueConstraint("tenant_id", "job_type"),
    )
    op.create_index(
        op.f("ix_tenant_job_tenant_id"), "tenant_job", ["tenant_id"], unique=False
    )
    # ### end Alembic commands ###
    op.execute(create_timeline_func)
    op.execute(create_timeline_trigger)


def downgrade():
    op.execute(drop_timeline_trigger)
    op.execute(drop_timeline_func)
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_tenant_job_tenant_id"), table_name="tenant_job")
    op.drop_table("tenant_job")
    # ### end Alembic commands ###
