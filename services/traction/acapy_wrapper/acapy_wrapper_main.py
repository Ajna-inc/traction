# coding: utf-8

"""
    Aries Cloud Agent

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.7.2
    Generated by: https://openapi-generator.tech
"""


from fastapi import APIRouter, Depends, FastAPI
from fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer
from sqlalchemy.ext.asyncio import AsyncSession
from starlette.middleware import Middleware
from starlette_context import plugins
from starlette_context.middleware import RawContextMiddleware

from api.endpoints.dependencies.db import get_db
from api.endpoints.dependencies.jwt_security import AccessToken
from api.core.config import settings
from api.endpoints.dependencies.tenant_security import (
    JWTTFetchingMiddleware,
    get_tenant_access_token,
)

from acapy_wrapper.apis.action_menu_api import router as ActionMenuApiRouter
from acapy_wrapper.apis.basicmessage_api import router as BasicmessageApiRouter
from acapy_wrapper.apis.connection_api import router as ConnectionApiRouter
from acapy_wrapper.apis.credential_definition_api import (
    router as CredentialDefinitionApiRouter,
)
from acapy_wrapper.apis.credentials_api import router as CredentialsApiRouter
from acapy_wrapper.apis.did_exchange_api import router as DidExchangeApiRouter
from acapy_wrapper.apis.endorse_transaction_api import (
    router as EndorseTransactionApiRouter,
)
from acapy_wrapper.apis.introduction_api import router as IntroductionApiRouter
from acapy_wrapper.apis.issue_credential_v1_0_api import (
    router as IssueCredentialV10ApiRouter,
)
from acapy_wrapper.apis.issue_credential_v2_0_api import (
    router as IssueCredentialV20ApiRouter,
)
from acapy_wrapper.apis.jsonld_api import router as JsonldApiRouter
from acapy_wrapper.apis.ledger_api import router as LedgerApiRouter
from acapy_wrapper.apis.mediation_api import router as MediationApiRouter
from acapy_wrapper.apis.multitenancy_api import router as MultitenancyApiRouter
from acapy_wrapper.apis.out_of_band_api import router as OutOfBandApiRouter
from acapy_wrapper.apis.present_proof_v1_0_api import router as PresentProofV10ApiRouter
from acapy_wrapper.apis.present_proof_v2_0_api import router as PresentProofV20ApiRouter
from acapy_wrapper.apis.resolver_api import router as ResolverApiRouter
from acapy_wrapper.apis.revocation_api import router as RevocationApiRouter
from acapy_wrapper.apis.schema_api import router as SchemaApiRouter
from acapy_wrapper.apis.server_api import router as ServerApiRouter
from acapy_wrapper.apis.trustping_api import router as TrustpingApiRouter
from acapy_wrapper.apis.wallet_api import router as WalletApiRouter


middleware = [
    Middleware(
        RawContextMiddleware,
        plugins=(plugins.RequestIdPlugin(), plugins.CorrelationIdPlugin()),
    ),
    Middleware(JWTTFetchingMiddleware),
]


router = APIRouter()


def get_acapy_wrapper_app() -> FastAPI:
    app = FastAPI(
        title=settings.TENANT_TITLE,
        description=settings.TENANT_DESCRIPTION,
        debug=settings.DEBUG,
        middleware=middleware,
    )
    # mount the token endpoint
    app.include_router(router, prefix="")
    # mount other endpoints, these will be secured by the above token endpoint
    app.include_router(
        ActionMenuApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        BasicmessageApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        ConnectionApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        CredentialDefinitionApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        CredentialsApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        DidExchangeApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        EndorseTransactionApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        IntroductionApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        IssueCredentialV10ApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        IssueCredentialV20ApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        JsonldApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        LedgerApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    # app.include_router(
    #     MediationApiRouter,
    # )
    # app.include_router(
    #     MultitenancyApiRouter,
    # )
    app.include_router(
        OutOfBandApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        PresentProofV10ApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        PresentProofV20ApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        ResolverApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        RevocationApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        SchemaApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        ServerApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        TrustpingApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    app.include_router(
        WalletApiRouter,
        prefix="",
        dependencies=[Depends(OAuth2PasswordBearer(tokenUrl="token"))],
    )
    return app


@router.post("/token", response_model=AccessToken)
async def login_for_tenant_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_db)
):
    access_token = await get_tenant_access_token(form_data, db)
    return access_token
