# flake8: noqa
"""v1-issued_credential_timeline

Revision ID: f8a1c2826fed
Revises: 2f4f0f83b0e8
Create Date: 2022-05-23 17:01:38.196143

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f8a1c2826fed"
down_revision = "2f4f0f83b0e8"
branch_labels = None
depends_on = None

create_timeline_func = """CREATE OR REPLACE FUNCTION issued_credential_timeline_func() RETURNS trigger AS $body$
    BEGIN
        IF NEW.status IS DISTINCT FROM OLD.status OR NEW.state IS DISTINCT FROM OLD.state THEN
            INSERT INTO "issued_credential_timeline" ( "issued_credential_id", "status", "state" )
            VALUES(NEW."issued_credential_id",NEW."status",NEW."state");
            RETURN NEW;
        END IF;
        RETURN null;
    END;
    $body$ LANGUAGE plpgsql
"""

drop_timeline_func = """DROP FUNCTION issued_credential_timeline_func"""

create_timeline_trigger = """CREATE TRIGGER issued_credential_timeline_trigger
AFTER INSERT OR UPDATE OF status, state ON issued_credential
FOR EACH ROW EXECUTE PROCEDURE issued_credential_timeline_func();"""

drop_timeline_trigger = (
    """DROP TRIGGER issued_credential_timeline_trigger ON issued_credential"""
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "issued_credential_timeline",
        sa.Column(
            "issued_credential_timeline_id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("issued_credential_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("state", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["issued_credential_id"],
            ["issued_credential.issued_credential_id"],
        ),
        sa.PrimaryKeyConstraint("issued_credential_timeline_id"),
    )
    op.create_index(
        op.f("ix_issued_credential_timeline_issued_credential_id"),
        "issued_credential_timeline",
        ["issued_credential_id"],
        unique=False,
    )
    # ### end Alembic commands ###

    op.execute(create_timeline_func)
    op.execute(create_timeline_trigger)


def downgrade():
    op.execute(drop_timeline_trigger)
    op.execute(drop_timeline_func)
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_issued_credential_timeline_issued_credential_id"),
        table_name="issued_credential_timeline",
    )
    op.drop_table("issued_credential_timeline")
    # ### end Alembic commands ###
