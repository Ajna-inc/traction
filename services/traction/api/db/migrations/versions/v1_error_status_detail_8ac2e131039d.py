# flake8: noqa
"""v1-error_status_detail

Revision ID: 8ac2e131039d
Revises: b01986f67aa3
Create Date: 2022-06-09 13:34:45.813263

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "8ac2e131039d"
down_revision = "b01986f67aa3"
branch_labels = None
depends_on = None


create_error_status_func = """CREATE OR REPLACE FUNCTION error_status_detail_func() RETURNS trigger AS $body$
    BEGIN
        IF NEW.status <> 'Error' THEN
            NEW.error_status_detail = NULL;
        END IF;
        RETURN NEW;
    END;
    $body$ LANGUAGE plpgsql
"""

drop_error_status_func = """DROP FUNCTION error_status_detail_func"""

create_error_status_trigger_1 = """CREATE TRIGGER error_status_detail_trigger
BEFORE UPDATE OF status ON issuer_credential
FOR EACH ROW EXECUTE PROCEDURE error_status_detail_func();"""

drop_error_status_trigger_1 = (
    """DROP TRIGGER error_status_detail_trigger ON issuer_credential"""
)

create_error_status_trigger_2 = """CREATE TRIGGER error_status_detail_trigger
BEFORE UPDATE OF status ON schema_template
FOR EACH ROW EXECUTE PROCEDURE error_status_detail_func();"""

drop_error_status_trigger_2 = (
    """DROP TRIGGER error_status_detail_trigger ON schema_template"""
)
create_error_status_trigger_3 = """CREATE TRIGGER error_status_detail_trigger
BEFORE UPDATE OF status ON credential_template
FOR EACH ROW EXECUTE PROCEDURE error_status_detail_func();"""

drop_error_status_trigger_3 = (
    """DROP TRIGGER error_status_detail_trigger ON credential_template"""
)


create_schema_template_timeline_func = """CREATE OR REPLACE FUNCTION schema_template_timeline_func() RETURNS trigger AS $body$
    BEGIN
        IF NEW.status IS DISTINCT FROM OLD.status OR NEW.state IS DISTINCT FROM OLD.state THEN
            INSERT INTO "schema_template_timeline" ( "schema_template_id", "status", "state" )
            VALUES(NEW."schema_template_id",NEW."status",NEW."state");
            RETURN NEW;
        END IF;
        RETURN null;
    END;
    $body$ LANGUAGE plpgsql
"""

drop_schema_template_timeline_func = """DROP FUNCTION schema_template_timeline_func"""

create_schema_template_timeline_trigger = """CREATE TRIGGER schema_template_timeline_trigger
AFTER INSERT OR UPDATE OF status, state ON schema_template
FOR EACH ROW EXECUTE PROCEDURE schema_template_timeline_func();"""

drop_schema_template_timeline_trigger = (
    """DROP TRIGGER schema_template_timeline_trigger ON schema_template"""
)


create_credential_template_timeline_func = """CREATE OR REPLACE FUNCTION credential_template_timeline_func() RETURNS trigger AS $body$
    BEGIN
        IF NEW.status IS DISTINCT FROM OLD.status OR NEW.state IS DISTINCT FROM OLD.state THEN
            INSERT INTO "credential_template_timeline" ( "credential_template_id", "status", "state" )
            VALUES(NEW."credential_template_id",NEW."status",NEW."state");
            RETURN NEW;
        END IF;
        RETURN null;
    END;
    $body$ LANGUAGE plpgsql
"""

drop_credential_template_timeline_func = (
    """DROP FUNCTION credential_template_timeline_func"""
)

create_credential_template_timeline_trigger = """CREATE TRIGGER credential_template_timeline_trigger
AFTER INSERT OR UPDATE OF status, state ON credential_template
FOR EACH ROW EXECUTE PROCEDURE credential_template_timeline_func();"""

drop_credential_template_timeline_trigger = (
    """DROP TRIGGER credential_template_timeline_trigger ON credential_template"""
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "schema_template_timeline",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "schema_template_timeline_id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("state", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("schema_template_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["schema_template_id"],
            ["schema_template.schema_template_id"],
        ),
        sa.PrimaryKeyConstraint("schema_template_timeline_id"),
    )
    op.create_index(
        op.f("ix_schema_template_timeline_schema_template_id"),
        "schema_template_timeline",
        ["schema_template_id"],
        unique=False,
    )
    op.create_table(
        "credential_template_timeline",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "credential_template_timeline_id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("state", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "credential_template_id", sqlmodel.sql.sqltypes.GUID(), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["credential_template_id"],
            ["credential_template.credential_template_id"],
        ),
        sa.PrimaryKeyConstraint("credential_template_timeline_id"),
    )
    op.create_index(
        op.f("ix_credential_template_timeline_credential_template_id"),
        "credential_template_timeline",
        ["credential_template_id"],
        unique=False,
    )
    op.add_column(
        "credential_template",
        sa.Column(
            "error_status_detail", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
    )
    op.add_column(
        "issuer_credential",
        sa.Column(
            "error_status_detail", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
    )
    op.add_column(
        "schema_template",
        sa.Column(
            "error_status_detail", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
    )
    # ### end Alembic commands ###
    op.execute(create_credential_template_timeline_func)
    op.execute(create_credential_template_timeline_trigger)

    op.execute(create_schema_template_timeline_func)
    op.execute(create_schema_template_timeline_trigger)

    op.execute(create_error_status_func)
    op.execute(create_error_status_trigger_1)
    op.execute(create_error_status_trigger_2)
    op.execute(create_error_status_trigger_3)


def downgrade():
    op.execute(drop_credential_template_timeline_trigger)
    op.execute(drop_credential_template_timeline_func)

    op.execute(drop_schema_template_timeline_trigger)
    op.execute(drop_schema_template_timeline_func)

    op.execute(drop_error_status_trigger_3)
    op.execute(drop_error_status_trigger_2)
    op.execute(drop_error_status_trigger_1)
    op.execute(drop_error_status_func)
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("schema_template", "error_status_detail")
    op.drop_column("issuer_credential", "error_status_detail")
    op.drop_column("credential_template", "error_status_detail")
    op.drop_index(
        op.f("ix_credential_template_timeline_credential_template_id"),
        table_name="credential_template_timeline",
    )
    op.drop_table("credential_template_timeline")
    op.drop_index(
        op.f("ix_schema_template_timeline_schema_template_id"),
        table_name="schema_template_timeline",
    )
    op.drop_table("schema_template_timeline")
    # ### end Alembic commands ###
